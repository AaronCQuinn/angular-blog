{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, tap, catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.signUpData = {\n      username: '',\n      email: '',\n      password: '',\n      confPassword: ''\n    };\n    this.signInData = {\n      username: '',\n      password: ''\n    };\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    this.loadUser().subscribe({\n      next: user => {\n        console.log('User loaded:', user);\n        this.setUser(user.username);\n      },\n      error: err => console.error('Error loading user:', err)\n    });\n  }\n  submitSignUp() {\n    return this.http.post('http://localhost:5000/api/register', this.signUpData, {\n      headers: this.headers,\n      withCredentials: true\n    });\n  }\n  submitSignIn() {\n    return this.http.post('http://localhost:5000/api/login', this.signInData, {\n      headers: this.headers,\n      withCredentials: true\n    });\n  }\n  getUser() {\n    // Return user information\n    return this.user;\n  }\n  setUser(user) {\n    this.user = user;\n    this.userSubject.next(user); // emit new user value\n  }\n\n  loadUser() {\n    // Fetch user information from server based on JWT token \n    return this.http.get('http://localhost:5000/api/verify', {\n      withCredentials: true\n    }).pipe(tap(data => console.log('loadUser data:', data)), catchError(error => {\n      console.log('loadUser error:', error);\n      return of(null);\n    }));\n  }\n  logout() {\n    // Clear user information and JWT token\n    this.user = null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,eAAe,EAAEC,GAAG,EAAEC,UAAU,EAAEC,EAAE,QAAQ,MAAM;;;AAMvE,OAAM,MAAOC,WAAW;EAiBtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAfhB,gBAAW,GAAG,IAAIN,eAAe,CAAM,IAAI,CAAC;IAC7C,UAAK,GAAG,IAAI,CAACO,WAAW,CAACC,YAAY,EAAE;IAE9C,eAAU,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;KACf;IAED,eAAU,GAAG;MACXH,QAAQ,EAAE,EAAE;MACZE,QAAQ,EAAE;KACX;IAaO,YAAO,GAAG,IAAIZ,WAAW,EAAE,CAClCc,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAXtC,IAAI,CAACC,QAAQ,EAAE,CAACC,SAAS,CAAC;MACxBC,IAAI,EAAEC,IAAI,IAAG;QACXC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC;QACjC,IAAI,CAACG,OAAO,CAACH,IAAI,CAACR,QAAQ,CAAC;MAC7B,CAAC;MACDY,KAAK,EAAEC,GAAG,IAAIJ,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEC,GAAG;KACvD,CAAC;EACJ;EAMAC,YAAY;IACV,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAO,oCAAoC,EAAE,IAAI,CAACC,UAAU,EAAE;MAACC,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEC,eAAe,EAAE;IAAI,CAAC,CAAC;EACpI;EAEAC,YAAY;IACV,OAAO,IAAI,CAACtB,IAAI,CAACkB,IAAI,CAAO,iCAAiC,EAAE,IAAI,CAACK,UAAU,EAAE;MAACH,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEC,eAAe,EAAE;IAAI,CAAC,CAAC;EACjI;EAEOG,OAAO;IACZ;IACA,OAAO,IAAI,CAACb,IAAI;EAClB;EAEAG,OAAO,CAACH,IAAU;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACV,WAAW,CAACS,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;EAC/B;;EAEOH,QAAQ;IACb;IACA,OAAO,IAAI,CAACR,IAAI,CAACyB,GAAG,CAAM,kCAAkC,EAAE;MAACJ,eAAe,EAAE;IAAI,CAAC,CAAC,CAACK,IAAI,CACzF/B,GAAG,CAACgC,IAAI,IAAIf,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEc,IAAI,CAAC,CAAC,EAChD/B,UAAU,CAACmB,KAAK,IAAG;MACjBH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,KAAK,CAAC;MACrC,OAAOlB,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAGO+B,MAAM;IACX;IACA,IAAI,CAACjB,IAAI,GAAG,IAAI;EAClB;;AAhEWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["HttpHeaders","BehaviorSubject","tap","catchError","of","AuthService","constructor","http","userSubject","asObservable","username","email","password","confPassword","set","loadUser","subscribe","next","user","console","log","setUser","error","err","submitSignUp","post","signUpData","headers","withCredentials","submitSignIn","signInData","getUser","get","pipe","data","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aaron\\Desktop\\angular-blog\\src\\app\\services\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject, tap, catchError, of } from 'rxjs';\nimport { User } from '../User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private user: any;\n  private userSubject = new BehaviorSubject<any>(null);\n  public user$ = this.userSubject.asObservable();\n\n  signUpData = {\n    username: '',\n    email: '',\n    password: '',\n    confPassword: '',\n  }\n\n  signInData = {\n    username: '',\n    password: '',\n  }\n\n  constructor(private http: HttpClient) {\n    this.loadUser().subscribe({\n      next: user => {\n        console.log('User loaded:', user);\n        this.setUser(user.username);\n      },\n      error: err => console.error('Error loading user:', err)\n    });\n  }\n  \n\n  private headers = new HttpHeaders()\n  .set('Content-Type', 'application/json')\n\n  submitSignUp(): Observable<User> {  \n    return this.http.post<User>('http://localhost:5000/api/register', this.signUpData, {headers: this.headers, withCredentials: true});\n  }\n\n  submitSignIn(): Observable<User> {  \n    return this.http.post<User>('http://localhost:5000/api/login', this.signInData, {headers: this.headers, withCredentials: true});\n  }\n  \n  public getUser(): any {\n    // Return user information\n    return this.user;\n  }\n\n  setUser(user: User) {   \n    this.user = user;\n    this.userSubject.next(user); // emit new user value\n  }\n  \n  public loadUser(): Observable<any> {   \n    // Fetch user information from server based on JWT token \n    return this.http.get<any>('http://localhost:5000/api/verify', {withCredentials: true}).pipe(\n      tap(data => console.log('loadUser data:', data)),\n      catchError(error => {\n        console.log('loadUser error:', error);\n        return of(null);\n      })\n    );\n  }\n  \n  \n  public logout(): void {\n    // Clear user information and JWT token\n    this.user = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}