{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://your.api.url'; // Replace with your API URL\n    this.signUpData = {\n      username: '',\n      email: '',\n      password: '',\n      confPassword: ''\n    };\n    this.signInData = {\n      username: '',\n      password: ''\n    };\n  }\n  submitSignUp(user) {\n    console.log('hit');\n    return this.http.post('http://localhost:5000/api/register', user, {\n      headers: this.headers,\n      withCredentials: true\n    });\n  }\n  onSignInSubmit() {\n    // Couldn't get the post request to actually send without having the .subscribe() call.\n    this.blogsService.submitSignIn(this.signInData).subscribe(response => {\n      console.log(response);\n    });\n    this.close();\n  }\n  isAuthenticated() {\n    // Check if user is authenticated based on JWT token presence and validity\n    return !!this.getToken();\n  }\n  getUser() {\n    // Return user information\n    return this.user;\n  }\n  loadUser() {\n    // Fetch user information from server based on JWT token\n    const token = this.getToken();\n    if (!token) {\n      return;\n    }\n    const options = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    return this.http.get(`${this.apiUrl}/user`, options);\n  }\n  login(email, password) {\n    // Send login request to server and store user information and JWT token\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, body).pipe(tap(response => {\n      const {\n        user,\n        token\n      } = response;\n      this.user = user;\n      document.cookie = `jwt=${token}`;\n    }));\n  }\n  signup(email, password) {\n    // Send signup request to server and store user information and JWT token\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/signup`, body).pipe(tap(response => {\n      const {\n        user,\n        token\n      } = response;\n      this.user = user;\n      document.cookie = `jwt=${token}`;\n    }));\n  }\n  logout() {\n    // Clear user information and JWT token\n    this.user = null;\n    document.cookie = 'jwt=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAgBtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAfhB,WAAM,GAAG,sBAAsB,CAAC,CAAC;IAGzC,eAAU,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;KACf;IAED,eAAU,GAAG;MACXH,QAAQ,EAAE,EAAE;MACZE,QAAQ,EAAE;KACX;EAEuC;EAExCE,YAAY,CAACC,IAAU;IACrBC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,oCAAoC,EAAEH,IAAI,EAAE;MAACI,OAAO,EAAE,IAAI,CAACA,OAAO;MAAEC,eAAe,EAAE;IAAI,CAAC,CAAC;EACzH;EAEAC,cAAc;IACV;IACF,IAAI,CAACC,YAAY,CAACC,YAAY,CAAC,IAAI,CAACC,UAAU,CAAC,CAACC,SAAS,CAAEC,QAAQ,IAAG;MACpEV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC;IAEvB,CAAC,CAAE;IACH,IAAI,CAACC,KAAK,EAAE;EACd;EAEOC,eAAe;IACpB;IACA,OAAO,CAAC,CAAC,IAAI,CAACC,QAAQ,EAAE;EAC1B;EAEOC,OAAO;IACZ;IACA,OAAO,IAAI,CAACf,IAAI;EAClB;EAEOgB,QAAQ;IACb;IACA,MAAMC,KAAK,GAAG,IAAI,CAACH,QAAQ,EAAE;IAC7B,IAAI,CAACG,KAAK,EAAE;MACV;;IAEF,MAAMC,OAAO,GAAG;MACdd,OAAO,EAAE;QACPe,aAAa,EAAE,UAAUF,KAAK;;KAEjC;IACD,OAAO,IAAI,CAACvB,IAAI,CAAC0B,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,OAAO,EAAEH,OAAO,CAAC;EACtD;EAEOI,KAAK,CAAC1B,KAAa,EAAEC,QAAgB;IAC1C;IACA,MAAM0B,IAAI,GAAG;MACX3B,KAAK;MACLC;KACD;IACD,OAAO,IAAI,CAACH,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACkB,MAAM,QAAQ,EAAEE,IAAI,CAAC,CAACC,IAAI,CACtDC,GAAG,CAACd,QAAQ,IAAG;MACb,MAAM;QAAEX,IAAI;QAAEiB;MAAK,CAAE,GAAGN,QAAQ;MAChC,IAAI,CAACX,IAAI,GAAGA,IAAI;MAChB0B,QAAQ,CAACC,MAAM,GAAG,OAAOV,KAAK,EAAE;IAClC,CAAC,CAAC,CACH;EACH;EAEOW,MAAM,CAAChC,KAAa,EAAEC,QAAgB;IAC3C;IACA,MAAM0B,IAAI,GAAG;MACX3B,KAAK;MACLC;KACD;IACD,OAAO,IAAI,CAACH,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACkB,MAAM,SAAS,EAAEE,IAAI,CAAC,CAACC,IAAI,CACvDC,GAAG,CAACd,QAAQ,IAAG;MACb,MAAM;QAAEX,IAAI;QAAEiB;MAAK,CAAE,GAAGN,QAAQ;MAChC,IAAI,CAACX,IAAI,GAAGA,IAAI;MAChB0B,QAAQ,CAACC,MAAM,GAAG,OAAOV,KAAK,EAAE;IAClC,CAAC,CAAC,CACH;EACH;EAEOY,MAAM;IACX;IACA,IAAI,CAAC7B,IAAI,GAAG,IAAI;IAChB0B,QAAQ,CAACC,MAAM,GAAG,8CAA8C;EAClE;;AA1FWnC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsC,SAAXtC,WAAW;EAAAuC,YAFV;AAAM","names":["AuthService","constructor","http","username","email","password","confPassword","submitSignUp","user","console","log","post","headers","withCredentials","onSignInSubmit","blogsService","submitSignIn","signInData","subscribe","response","close","isAuthenticated","getToken","getUser","loadUser","token","options","Authorization","get","apiUrl","login","body","pipe","tap","document","cookie","signup","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aaron\\Desktop\\angular-blog\\src\\app\\services\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://your.api.url'; // Replace with your API URL\n  private user: any; // Store user information here\n\n  signUpData = {\n    username: '',\n    email: '',\n    password: '',\n    confPassword: '',\n  }\n\n  signInData = {\n    username: '',\n    password: '',\n  }\n\n  constructor(private http: HttpClient) { }\n\n  submitSignUp(user: User): Observable<User> {  \n    console.log('hit');\n    return this.http.post<User>('http://localhost:5000/api/register', user, {headers: this.headers, withCredentials: true});\n  }\n\n  onSignInSubmit() {\n      // Couldn't get the post request to actually send without having the .subscribe() call.\n    this.blogsService.submitSignIn(this.signInData).subscribe((response => {\n      console.log(response);\n      \n    }));\n    this.close();\n  }\n\n  public isAuthenticated(): boolean {\n    // Check if user is authenticated based on JWT token presence and validity\n    return !!this.getToken();\n  }\n\n  public getUser(): any {\n    // Return user information\n    return this.user;\n  }\n\n  public loadUser(): Observable<any> {\n    // Fetch user information from server based on JWT token\n    const token = this.getToken();\n    if (!token) {\n      return;\n    }\n    const options = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    return this.http.get(`${this.apiUrl}/user`, options);\n  }\n\n  public login(email: string, password: string): Observable<any> {\n    // Send login request to server and store user information and JWT token\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/login`, body).pipe(\n      tap(response => {\n        const { user, token } = response;\n        this.user = user;\n        document.cookie = `jwt=${token}`;\n      })\n    );\n  }\n\n  public signup(email: string, password: string): Observable<any> {\n    // Send signup request to server and store user information and JWT token\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.apiUrl}/signup`, body).pipe(\n      tap(response => {\n        const { user, token } = response;\n        this.user = user;\n        document.cookie = `jwt=${token}`;\n      })\n    );\n  }\n\n  public logout(): void {\n    // Clear user information and JWT token\n    this.user = null;\n    document.cookie = 'jwt=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}