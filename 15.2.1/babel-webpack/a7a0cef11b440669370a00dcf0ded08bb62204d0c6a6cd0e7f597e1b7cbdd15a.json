{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://your.api.url'; // Replace with your API URL\n    this.signUpData = {\n      username: '',\n      email: '',\n      password: '',\n      confPassword: ''\n    };\n    this.signInData = {\n      username: '',\n      password: ''\n    };\n  }\n  onSignUpSubmit() {\n    // Couldn't get the post request to actually send without having the .subscribe() call.\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,WAAW;EAgBtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAfhB,WAAM,GAAG,sBAAsB,CAAC,CAAC;IAGzC,eAAU,GAAG;MACXC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE;KACf;IAED,eAAU,GAAG;MACXH,QAAQ,EAAE,EAAE;MACZE,QAAQ,EAAE;KACX;EAEuC;EAIxCE,cAAc;IACZ;EAAA;;AArBSP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;EAAAS,YAFV;AAAM","names":["AuthService","constructor","http","username","email","password","confPassword","onSignUpSubmit","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aaron\\Desktop\\angular-blog\\src\\app\\services\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'https://your.api.url'; // Replace with your API URL\n  private user: any; // Store user information here\n\n  signUpData = {\n    username: '',\n    email: '',\n    password: '',\n    confPassword: '',\n  }\n\n  signInData = {\n    username: '',\n    password: '',\n  }\n\n  constructor(private http: HttpClient) { }\n\n\n\n  onSignUpSubmit() {\n    // Couldn't get the post request to actually send without having the .subscribe() call.\n\n  }\n\n  // onSignInSubmit() {\n  //     // Couldn't get the post request to actually send without having the .subscribe() call.\n  //   this.blogsService.submitSignIn(this.signInData).subscribe((response => {\n  //     console.log(response);\n      \n  //   }));\n  //   this.close();\n  // }\n\n  // public isAuthenticated(): boolean {\n  //   // Check if user is authenticated based on JWT token presence and validity\n  //   return !!this.getToken();\n  // }\n\n  // public getUser(): any {\n  //   // Return user information\n  //   return this.user;\n  // }\n\n  // public loadUser(): Observable<any> {\n  //   // Fetch user information from server based on JWT token\n  //   const token = this.getToken();\n  //   if (!token) {\n  //     return;\n  //   }\n  //   const options = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`\n  //     }\n  //   };\n  //   return this.http.get(`${this.apiUrl}/user`, options);\n  // }\n\n  // public login(email: string, password: string): Observable<any> {\n  //   // Send login request to server and store user information and JWT token\n  //   const body = {\n  //     email,\n  //     password\n  //   };\n  //   return this.http.post(`${this.apiUrl}/login`, body).pipe(\n  //     tap(response => {\n  //       const { user, token } = response;\n  //       this.user = user;\n  //       document.cookie = `jwt=${token}`;\n  //     })\n  //   );\n  // }\n\n  // public signup(email: string, password: string): Observable<any> {\n  //   // Send signup request to server and store user information and JWT token\n  //   const body = {\n  //     email,\n  //     password\n  //   };\n  //   return this.http.post(`${this.apiUrl}/signup`, body).pipe(\n  //     tap(response => {\n  //       const { user, token } = response;\n  //       this.user = user;\n  //       document.cookie = `jwt=${token}`;\n  //     })\n  //   );\n  // }\n\n  // public logout(): void {\n  //   // Clear user information and JWT token\n  //   this.user = null;\n  //   document.cookie = 'jwt=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}